// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  username              String         @unique
  email                 String         @unique
  password              String
  firstName             String?
  lastName              String?
  profileImage          String?
  coverImage            String?
  bio                   String?
  sessions              Session[]
  followers             Follow[]       @relation("follower")
  following             Follow[]       @relation("following")
  posts                 Post[]         @relation("author")
  likes                 Post[]         @relation("likes")
  retweets              Repost[]
  outgoingNotifications Notification[] @relation("from")
  incomingNotifications Notification[] @relation("to")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  valid     Boolean  @default(true)
  userAgent String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit many-to-many relation table
model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])
  followerId  String
  followingId String

  @@id([followerId, followingId])
}

// Comments uses implicit one-to-many relation table
model Post {
  id           String   @id @default(cuid())
  author       User     @relation("author", fields: [authorId], references: [id])
  authorId     String
  content      String
  image        String?
  likes        User[]   @relation("likes")
  retweets     Repost[]
  comments     Post[]   @relation("comments")
  parentPost   Post?    @relation("comments", fields: [parentPostId], references: [id])
  parentPostId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Repost {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

model Notification {
  id        String           @id @default(cuid())
  from      User             @relation("from", fields: [fromId], references: [id])
  to        User             @relation("to", fields: [toId], references: [id])
  fromId    String
  toId      String
  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum NotificationType {
  FOLLOW
  LIKE
  RETWEET
}
